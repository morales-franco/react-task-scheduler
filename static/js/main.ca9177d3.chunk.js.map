{"version":3,"sources":["logo.svg","components/Navigation.js","components/TaskForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","react_default","a","createElement","className","href","src","logo","alt","this","props","title","tasksCount","Component","TaskForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","responsible","description","priority","onChangeValue","bind","assertThisInitialized","onSave","e","_e$target","target","value","name","setState","defineProperty","preventDefault","trim","console","log","onAddTask","alert","onSubmit","type","placeholder","onChange","rows","App","tasks","addTask","_this2","map","task","i","key","onClick","removeTask","components_Navigation","length","components_TaskForm","newTask","concat","toConsumableArray","taskIndex","window","confirm","filter","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca9177d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport logo from './../logo.svg'\r\n\r\nclass Navigation extends Component{\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">\r\n                        <img src={ logo } className = \"App-logo d-inline-block align-top\" alt=\"logo\" />\r\n                        { this.props.title }\r\n                        <span className=\"badge badge-pill badge-light ml-2\">\r\n                        { this.props.tasksCount }\r\n                        </span>\r\n                    </a>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Navigation;","import React, { Component } from 'react'\r\n\r\nclass TaskForm extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            title: \"\",\r\n            responsible: \"\",\r\n            description: \"\",\r\n            priority: \"low\"\r\n        }\r\n\r\n        /**\r\n         * When we call a Event from render function usually this eventFunction lose \r\n         * the scope. In other words, the eventFunction doesnt know \"this\"\r\n         * Here, We attach \"this\" with the event function \r\n         */\r\n        this.onChangeValue = this.onChangeValue.bind(this);\r\n        this.onSave = this.onSave.bind(this);\r\n    }\r\n\r\n    onChangeValue(e){\r\n        // console.log(e.target.value, e.target.name);\r\n        \r\n        const { value, name } = e.target;\r\n\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    onSave(e){\r\n        e.preventDefault();\r\n\r\n        if( this.state.title.trim() === \"\" ||\r\n        this.state.responsible.trim() === \"\" ||\r\n        this.state.description.trim() === \"\"){\r\n            alert(\"You must complete all fields\");\r\n            return;\r\n        }\r\n        \r\n        console.log(\"Sending data...\");\r\n        console.log(this.state);\r\n\r\n        this.props.onAddTask(this.state);\r\n\r\n        this.setState = {\r\n            title: \"\",\r\n            responsible: \"\",\r\n            description: \"\",\r\n            priority: \"low\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.onSave}>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" name=\"title\" className=\"form-control\" placeholder=\"Title\" onChange={this.onChangeValue}/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" name=\"responsible\" className=\"form-control\" placeholder=\"Responsible\" onChange={this.onChangeValue}/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <textarea  name=\"description\" className=\"form-control\" placeholder=\"Description\" rows=\"3\" onChange={this.onChangeValue}/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <select className=\"form-control\" name=\"priority\" onChange={this.onChangeValue}>\r\n                                <option>Low</option>\r\n                                <option>Medium</option>\r\n                                <option>High</option>\r\n                            </select>\r\n                        </div>\r\n                        <button className=\"btn btn-primary\">Save</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TaskForm;","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation'\nimport TaskForm from './components/TaskForm'\nimport { tasks } from './tasks.json'\n\nclass App extends Component {\n\n    constructor(){\n        //Super() is necessary if I use a constructor\n        super();\n\n        this.state = {\n            tasks: tasks\n        };\n\n        this.addTask = this.addTask.bind(this);\n    }\n\n    render() {\n        console.log(\"Before render App component\");\n        console.log(this.state.tasks);\n\n        const tasks = this.state.tasks.map((task, i) => {\n                            return (\n                                <div className=\"col-md-4 mt-1\" key={i}>\n                                    <div className=\"card text-center\">\n                                        <div className=\"card-header\">\n                                            <h3>{ task.title }</h3>\n                                            <span className=\"badge badge-pill badge-danger ml-2\">\n                                                { task.priority }\n                                            </span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <h5 className=\"card-title\">{ task.responsible }</h5>\n                                            <p className=\"card-text\">{ task.description }</p>\n                                        </div>\n                                        <div className=\"card-footer text-muted\">\n                                            <button className=\"btn btn-dark\" onClick={this.removeTask.bind(this, i)}>Done</button>\n                                        </div>\n                                    </div>\n                                </div>)\n                        });\n\n\n        //Code Xjs\n        return (\n            <div className = \"App\" >\n                <Navigation title=\"Task Scheduler\" tasksCount={ this.state.tasks.length } />\n                \n                <div className=\"container\">\n                    <div className=\"row mt-4\">\n                        <div className=\"col-md-3\">\n                            <TaskForm onAddTask={this.addTask}/>\n                        </div>\n                        <div className=\"col-md-9\">\n                            <div className=\"row\">\n                                { tasks }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    addTask(newTask){\n        this.setState({\n            tasks : [...this.state.tasks, newTask]\n        })\n    }\n\n    removeTask(taskIndex){\n        if(!window.confirm(\"Are you sure you want to delete this task??\"))\n        return;\n\n        this.setState({\n            tasks: this.state.tasks.filter((task,i) => \n            {\n                return i !== taskIndex\n            })\n        })\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}